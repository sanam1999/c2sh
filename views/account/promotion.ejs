<% layout('layouts/boilerplates.ejs') %>
    <style>
        table {
            font-family: Arial, sans-serif;
            border-collapse: collapse;
            width: 40rem;
            margin-top: 20px;
            /* Added margin for better spacing */
        }

        th {
            background-color: #4CAF50;
            /* Header background color */
            color: white;
            /* Header text color */
        }

        td,
        th {
            border: 1px solid #dddddd;
            text-align: left;
            padding: 8px;
        }

        tr:nth-child(even) {
            background-color: #f2f2f2;
            /* Light gray for even rows */
        }

        #noOfValueWithdrawal,
        #noOfValueDeposit {
            width: 3rem;
        }

        .id {
            display: none;
        }

        h1,
        h3 {
            margin: 10px 0;
            /* Added margin for headings */
        }

        select,
        input[type="text"] {
            margin: 10px 0;
            /* Margin for form elements */
            padding: 8px;
            /* Padding for comfort */
            border-radius: 4px;
            /* Rounded corners */
            border: 1px solid #ccc;
            /* Border for inputs */
            width: 100%;
            /* Full width for better layout */
            box-sizing: border-box;
            /* Include padding and border in width */
        }

        select:focus,
        input[type="text"]:focus {
            outline: none;
            /* Remove default focus outline */
            border-color: #4CAF50;
            /* Change border color on focus */
        }

        option {
            padding: 8px;
            /* Padding for options */
        }

        /* Additional styles for the alert confirmation */
        .alert {
            color: red;
            /* Red color for alerts */
            font-weight: bold;
            /* Bold for emphasis */
        }
    </style>
    <style>
        section {
            background-color: #ffffff;
            /* White background for sections */
            border-radius: 8px;
            /* Rounded corners for sections */
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
            /* Subtle shadow for depth */
            padding: 20px;
            /* Padding inside sections */
            margin-bottom: 20px;
            /* Space between sections */
        }

        h1,
        h3 {
            margin: 10px 0;
            color: #4CAF50;
            /* Header text color */
            text-align: center;
            /* Centered header text */
        }

        table {
            font-family: Arial, sans-serif;
            border-collapse: collapse;
            width: 100%;
            /* Full width for responsive design */
            margin-top: 20px;
            /* Space above the table */
        }

        th {
            background-color: #4CAF50;
            /* Header background color */
            color: white;
            /* Header text color */
            padding: 12px;
            /* Added padding for header cells */
            text-transform: uppercase;
            /* Uppercase for header text */
            letter-spacing: 1px;
            /* Spacing between letters */
            transition: background-color 0.3s;
            /* Smooth transition for hover effect */
        }

        th:hover {
            background-color: #45a049;
            /* Darker shade on hover */
        }

        td,
        th {
            border: 1px solid #dddddd;
            text-align: left;
            padding: 12px;
            /* Increased padding for table cells */
        }

        tr:nth-child(even) {
            background-color: #f9f9f9;
            /* Light gray for even rows */
        }

        tr:hover {
            background-color: #f1f1f1;
            /* Highlight row on hover */
            transition: background-color 0.3s;
            /* Smooth transition for hover */
        }

        #noOfValueWithdrawal,
        #noOfValueDeposit {
            width: 3rem;
        }

        .id {
            display: none;
        }

        select,
        input[type="text"] {
            margin: 10px 0;
            /* Margin for form elements */
            padding: 10px;
            /* Padding for comfort */
            border-radius: 4px;
            /* Rounded corners */
            border: 1px solid #ccc;
            /* Border for inputs */
            width: 100%;
            /* Full width for better layout */
            box-sizing: border-box;
            /* Include padding and border in width */
            transition: border-color 0.3s;
            /* Smooth transition for border color */
        }

        select:focus,
        input[type="text"]:focus {
            outline: none;
            /* Remove default focus outline */
            border-color: #4CAF50;
            /* Change border color on focus */
            box-shadow: 0 0 5px rgba(76, 175, 80, 0.5);
            /* Subtle shadow on focus */
        }

        option {
            padding: 8px;
            /* Padding for options */
        }

        .alert {
            color: red;
            /* Red color for alerts */
            font-weight: bold;
            /* Bold for emphasis */
            text-align: center;
            /* Center the alert text */
        }

        /* Responsive styles */
        @media (max-width: 768px) {
            table {
                font-size: 14px;
                /* Smaller font size on mobile */
            }

            h1,
            h3 {
                font-size: 1.5em;
                /* Responsive font size for headings */
            }

            section {
                padding: 15px;
                /* Reduced padding for smaller screens */
            }
        }

        @media (max-width: 480px) {

            h1,
            h3 {
                font-size: 1.2em;
                /* Further reduced font size for very small screens */
            }
        }
    </style>


    <section>
        <h1>Total User <%= users.length %>
        </h1>
        <% let a=0; %>
            <% users.forEach(user=> { %>
                <% if (user.role !=='Unverified' ) { %>
                    <% a +=1; %>
                        <% } %>
                            <% }); %>
                                <h1>Total Verified Users: <%= a %>
                                </h1>


                                <form action="/account/promotion" method="post" id="promotionForm">
                                    <select name="role" id="userStatus">
                                        <option value="all">All</option>
                                        <option value="Unverified">Unverified</option>
                                        <option value="Verified">Verified</option>
                                        <option value="communityMember">Community Member</option>
                                    </select>
                                    <input type="text" placeholder="Name or email" name="ser" id="ser">
                                </form>
    </section>

    <section>
        <h1>Promotion</h1>
        <table>
            <thead>
                <tr>
                    <th>Date</th>
                    <th>Amount</th>
                    <th>Purpose</th>
                    <th>Action</th>
                </tr>
            </thead>
            <tbody id="withdrawalTable">
                <% users.forEach(user=> { %>
                    <tr data-id="<%= user._id %>">
                        <td>
                            <p class="id">
                                <%= user._id %>
                            </p>
                            <%= user.name %>
                        </td>
                        <td class="role">
                            <%= user.role %>
                        </td>
                        <td>
                            <%= user.username %>
                        </td>

                        <td>
                            <select name="action" class="userStatus">
                                <option value="Verified" <%=user.role==='Verified' ? 'selected' : '' %>>Verified
                                </option>
                                <option value="Unverified" <%=user.role==='Unverified' ? 'selected' : '' %>>Unverified
                                </option>
                                <option value="communityMember" <%=user.role==='communityMember' ? 'selected' : '' %>
                                    >Promote to Board
                                    Member</option>
                                <option value="demotedboardmember" <%=user.role==='demotedboardmember' ? 'selected' : ''
                                    %>>Demote
                                    Board Member
                                </option>
                                <option value="deletedaccount" <%=user.role==='deletedaccount' ? 'selected' : '' %>
                                    >
                                    Delete Account
                                </option>

                            </select>


                        </td>
                    </tr>
                    <% }) %>
            </tbody>
        </table>

    </section>



    <script>
                                                                                                                                    const errorMsg = document.querySelector('.e_flassmsg');
                                                                                                                                    const seggMsg = document.querySelector('.s_flassmsg');
        document.getElementById("userStatus").addEventListener("change", async (event) => {
            const role = event.target.value;
            await getdata("role", role);
        });

        document.getElementById("ser").addEventListener("input", async (event) => {
            const nameOrEmail = event.target.value;

            await getdata("nameOremail", nameOrEmail);
        });

        async function getdata(type, value) {
            try {
                const response = await fetch("/account/promotion", {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                    },
                    body: JSON.stringify({ type: type, value: value }),
                });

                if (!response.ok) {
                    throw new Error("Network response was not ok: " + response.statusText);
                }

                const result = await response.json();
                let withdrawalTable = document.querySelector('#withdrawalTable');
                withdrawalTable.innerHTML = "";

                if (result.length === 0) {
                    let tr = document.createElement('tr');
                    let td = document.createElement('td');
                    td.colSpan = 4;
                    td.innerText = "No records found";
                    tr.appendChild(td);
                    withdrawalTable.appendChild(tr);
                } else {
                    result.forEach(user => {
                        let tr = document.createElement('tr');
                        tr.setAttribute('data-id', user._id);
                        tr.innerHTML = `
                        <td><p class="id">${user._id}</p>${user.name}</td>
                        <td class="role">${user.role}</td>
                        <td>${user.username}</td>
                        <td>
                             <select name="action" class="userStatus">
            <option value="Verified" ${user.role === 'Verified' ? 'selected' : ''}>Verified</option>
            <option value="Unverified" ${user.role === 'Unverified' ? 'selected' : ''}>Unverified</option>
            <option value="communityMember" ${user.role === 'promotetoboardmember' ? 'selected' : ''}>Promote to Board Member</option>
            <option value="Verified" ${user.role === 'demotedboardmember' ? 'selected' : ''}>Demote Board Member</option>
            <option value="deletedaccount" ${user.role === 'deletedaccount' ? 'selected' : ''}>Delete Account</option>
        </select>
                        </td>
                    `;
                        withdrawalTable.appendChild(tr);
                    });
                    attachUserStatusListeners();
                }
            } catch (error) {

            }
        }


        function attachUserStatusListeners() {
            const userStatusElements = document.querySelectorAll(".userStatus");

            userStatusElements.forEach(select => {
                select.addEventListener("change", async (e) => {
                    const selectedValue = e.target.value;
                    const userId = e.target.closest('tr').getAttribute('data-id');

                    if (selectedValue === "deletedaccount") {
                        const userConfirmed = confirm("Are you sure you want to delete your account? This action cannot be undone.");
                        if (!userConfirmed) {
                            e.target.value = '';
                            return;
                        }
                        e.target.closest('tr').remove();
                    }

                    try {
                        const response = await fetch('/account/promotion', {
                            method: 'PUT',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ action: selectedValue, userId: userId })
                        });

                        const result = await response.json();

                        if (response.ok) {
                            showMessage(seggMsg, result.message);
                            if (selectedValue !== "deletedaccount") {
                                e.target.closest('tr').querySelector(".role").innerText = result.role;
                            }
                        } else {
                            const errorMessage = response.status === 401 ? result.message : response.statusText;
                            showMessage(errorMsg, errorMessage);
                        }

                    } catch (error) {
                        showMessage(errorMsg, "An error occurred while updating user status.");
                    }
                });
            });
        }

                                        attachUserStatusListeners();

            async function petPromotion(type) {
                const url = type ? `/account/communityMember/${type}` : "/account/communityMember";

                        try {
                            const response = await fetch(url, {
                                method: "GET",
                                headers: {
                                    "Content-Type": "application/json",
                                },
                            });
                            return await response.json();;

                        } catch (error) {
                            console.error("Fetch error:", error);
                        }
                    }

              

                                    function showMessage(element, message) {
                                        element.innerText = message;
                                        element.style.display = 'block';
                                        setTimeout(() => {
                                            element.style.display = 'none';
                                        }, 5000);
                                    }
    </script>